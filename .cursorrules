# Use Object-Style Parameters for Functions

## Description

All functions and methods should use object-style parameters instead of positional parameters. This improves code readability, maintainability, and makes it easier to add optional parameters in the future.

## Pattern

❌ Don't:
```typescript
function processData(id: string, maxDuration: number, options?: Options) {
  // ...
}

class MyService {
  async fetchUser(userId: string, includeDetails: boolean) {
    // ...
  }
}

processData("123", 5000, { verbose: true });
service.fetchUser("user-1", true);
```

✅ Do:
```typescript
function processData(params: {
  id: string;
  maxDuration: number;
  options?: Options;
}) {
  const { id, maxDuration, options } = params;
  // ...
}

class MyService {
  async fetchUser(params: {
    userId: string;
    includeDetails: boolean;
  }) {
    const { userId, includeDetails } = params;
    // ...
  }
}

processData({ id: "123", maxDuration: 5000, options: { verbose: true } });
service.fetchUser({ userId: "user-1", includeDetails: true });
```

## Exceptions

Object-style parameters are not required for:
- Functions with a single parameter
- React component props (already object-style)
- Callback functions with standard signatures (e.g., `map`, `filter`, `forEach`)
- Constructor parameters (though encouraged)
- Very simple utility functions where the parameter name is obvious from context

## Rationale

- **Self-documenting**: Parameter names are visible at the call site
- **Flexibility**: Easy to add new optional parameters without breaking existing code
- **Refactoring-friendly**: Reordering parameters doesn't break calls
- **Type safety**: Better IDE support and autocomplete
- **Consistency**: Standard pattern across the codebase

## File Pattern

`**/*.ts`, `**/*.tsx`, `**/*.js`, `**/*.jsx`

---

# Addressing Copilot PR Review Comments

## Description

When addressing Copilot review comments on pull requests, follow these guidelines to ensure changes are incremental, well-documented, and properly resolved.

## Process

1. **Read all Copilot reviews** on the PR and collect all comments
2. **Assess each comment** and determine if it requires:
   - A simple fix (can be done immediately)
   - A large refactor (add TODO comment instead)
3. **Make changes incrementally**:
   - Do NOT make large changes to address a comment
   - If a large change is required, add a TODO comment to address it later
   - Keep fixes small and focused
4. **Update the branch** only after addressing ALL comments
5. **Resolve the comments** after updating the branch by replying to each comment
6. **Do NOT wait** for CI checks to finish after updating the branch

## Example TODO Comments

For large changes that should be deferred:

```typescript
// TODO: Consider using IAM roles or AWS STS for temporary credentials instead of 
// storing AWS credentials directly in environment variables for better security

// TODO: Refactor this component to use React hooks instead of class components
// This requires significant changes to state management and lifecycle methods
```

## Rationale

- **Small, focused changes**: Easier to review and less likely to introduce bugs
- **TODOs for large work**: Keeps the PR moving forward without blocking on major refactors
- **Batch updates**: More efficient than updating after each comment
- **Timely resolution**: Shows responsiveness to feedback without waiting for CI
- **Clear communication**: Comments are acknowledged and addressed systematically

## File Pattern

All files when addressing PR review comments
