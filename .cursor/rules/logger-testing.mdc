---
description: Do not mock the logger in tests, let logger calls execute naturally
globs: 
  - "**/*.test.ts"
  - "**/*.test.tsx"
alwaysApply: true
---

# Logger Testing Guidelines

## Description

Do not mock the logger in tests. Let logger calls execute naturally to ensure log statements are executed during testing and don't hide potential runtime issues.

## Pattern

❌ Don't:
```typescript
// Mock logger to avoid console output during tests
jest.mock('@/lib/logger', () => ({
  __esModule: true,
  default: {
    info: jest.fn(),
    error: jest.fn(),
  }
}));
```

✅ Do:
```typescript
// Note: Logger is not mocked - following cursor rule to allow natural logger execution
import logger from '@/lib/logger';

describe('MyComponent', () => {
  it('should log important events', () => {
    // Logger calls will execute naturally and be visible in test output
    myFunction();
    // No need to verify logger calls - just ensure functionality works
  });
});
```

## Rationale

- Mocking the logger can hide important debugging information during test failures
- Real logger usage helps ensure logging statements are syntactically correct
- Allows verification that appropriate log levels are being used
- Helps catch issues where logging might cause performance problems
- Test output will show actual log messages which aids in debugging

## When Logger Output is Noisy

If log output is noisy during tests, consider using test-specific log levels rather than mocking:

```typescript
// Set log level for tests if needed
process.env.LOG_LEVEL = 'error'; // Only show errors during tests
```

## File Pattern

`**/*.test.ts`, `**/*.test.tsx`