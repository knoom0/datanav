# Use Object-Style Parameters for Functions

## Description

All functions and methods should use object-style parameters instead of positional parameters. This improves code readability, maintainability, and makes it easier to add optional parameters in the future.

## Pattern

❌ Don't:
```typescript
function processData(id: string, maxDuration: number, options?: Options) {
  // ...
}

class MyService {
  async fetchUser(userId: string, includeDetails: boolean) {
    // ...
  }
}

processData("123", 5000, { verbose: true });
service.fetchUser("user-1", true);
```

✅ Do:
```typescript
function processData(params: {
  id: string;
  maxDuration: number;
  options?: Options;
}) {
  const { id, maxDuration, options } = params;
  // ...
}

class MyService {
  async fetchUser(params: {
    userId: string;
    includeDetails: boolean;
  }) {
    const { userId, includeDetails } = params;
    // ...
  }
}

processData({ id: "123", maxDuration: 5000, options: { verbose: true } });
service.fetchUser({ userId: "user-1", includeDetails: true });
```

## Exceptions

Object-style parameters are not required for:
- Functions with a single parameter
- React component props (already object-style)
- Callback functions with standard signatures (e.g., `map`, `filter`, `forEach`)
- Constructor parameters (though encouraged)
- Very simple utility functions where the parameter name is obvious from context

## Rationale

- **Self-documenting**: Parameter names are visible at the call site
- **Flexibility**: Easy to add new optional parameters without breaking existing code
- **Refactoring-friendly**: Reordering parameters doesn't break calls
- **Type safety**: Better IDE support and autocomplete
- **Consistency**: Standard pattern across the codebase

## File Pattern

`**/*.ts`, `**/*.tsx`, `**/*.js`, `**/*.jsx`
